---
title: "Spatial Association Detector(SPADE)"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{spade}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "##",
  warning = FALSE,
  message = FALSE,
  fig.path = "man/figures/spade/"
)
```

### Load data and package

``` {r}
library(sf)
library(tidyverse)
library(gdverse)

depression = system.file('extdata/Depression.csv',package = 'gdverse') %>%
  read_csv() %>%
  st_as_sf(coords = c('X','Y'), crs = 4326)
depression
```

### Spatial Autocorrelation of Depression Prevelence

here I use `geocomplexity` to calculate the global **Moran's I**:

```{r}
set.seed(123456789)

gmi = geocomplexity::moran_test(depression)
gmi
```

The global Moran'I Index of Depression Prevelence is `0.339557` and the P value is ` 2.892e-81`, which shows that Depression Prevelence has a moderate level of positive spatial autocorrelation in the global scale.

### OPGD modeling

```{r}
depression_opgd = opgd(Depression_prevelence ~ .,
                       data = depression, cores = 12)
depression_opgd
```

**You can access the detailed q statistics by `depression_opgd$factor`**

```{r}
depression_opgd$factor
```

### Spatial Weight Matrix

*SPADE* explicitly considers the spatial variance by assigning the weight of the influence based on spatial distribution and also minimizes the influence of the number of levels on PD values by using the multilevel discretization and considering information loss due to discretization.

When response variable has a strong spatial dependence, maybe *SPADE* is a best choice.

The biggest difference between SPADE and native GD and OPGD in actual modeling is that SPADE requires a spatial weight matrix to calculate spatial variance.

In `spade` function, when you not provide a spatial weight matrix, it will use **1st order inverse distance weight** by default, which can be created by `inverse_distance_weight()`.

```{r}
coords = depression |>
  st_centroid() |>
  st_coordinates()

wt1 = inverse_distance_weight(coords[,1],coords[,2])
```

You can also use gravity model weight by assigning the `power` parameter in `inverse_distance_weight()` function.

```{r}
wt2 = inverse_distance_weight(coords[,1],coords[,2],power = 2)
```

I have also developed the [sdsfun](https://stscl.github.io/sdsfun/) package to facilitate the construction of spatial weight matrices, which requires an input of an sf object.

```{r}
wt3 = sdsfun::spdep_contiguity_swm(depression, k = 8)
```

Or using a spatial weight matrix based on distance kernel functions.

```{r}
wt4 = sdsfun::spdep_distance_swm(depression, k = 6, kernel = 'gaussian')
```

The test of *SPADE* model significance in `gdverse` is achieved by randomization null hypothesis use a pseudo-p value, this calculation is very time-consuming. Default `gdverse` sets the `permutations` parameter to 0 and does not calculate the pseudo-p value. If you want to calculate the pseudo-p value, specify the `permutations` parameter to a number such as 99,999,9999, etc.

In the following section we will execute *SPADE* model using spatial weight matrix `wt1`.

### SPADE modeling

```{r spade,fig.width=8.5,fig.height=7.5}
depression_spade = spade(Depression_prevelence ~ .,
                         data = depression,
                         wt = wt1, cores = 12)
depression_spade
plot(depression_spade, slicenum = 6)
```

**You can also access the detailed q statistics by `depression_spade$factor`**

```{r}
depression_spade$factor
```
